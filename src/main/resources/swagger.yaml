openapi: 3.0.3
info:
  title: Swagger Users - OpenAPI 3.0
  description: |-
    Api criada para Realização de um CRUD
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
tags:
  - name: users
    description: Operations about user
  - name: cars
    description: Operations about cars
paths:
  /api/signin:
    post:
      tags:
        - users
      summary: Token access
      description: Generate Token access
      operationId: generateToken
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /users:
    get:
      tags:
        - users
      summary: Get all users.
      description: retorna todos os usuarios cadastrados
      operationId: getAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - users
      summary: Create user
      description: Create a user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          description: successful operation

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: ''
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: 'id of user '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete user by ID
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          description: Id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user by ID
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

  /api/me:
    get:
      tags:
        - cars
      summary: Return informations about user logged
      description: Return informations about user logged
      operationId: userInfoLogged
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLogged'
  /cars:
    get:
      tags:
        - cars
      summary: Get all cars for user logged.
      description: Get all cars for user logged.
      operationId: getAllCarsByUserLogged
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarResponse'
    post:
      tags:
        - cars
      summary: Register a new car for the logged in user
      description: Register a new car for the logged in user
      operationId: registerNewCarForLoggedUser
      requestBody:
        description: Created car object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarRequest'
      responses:
        200:
          description: successful operation

  /cars/{id}:
    get:
      tags:
        - cars
      summary: Search for a car from a logged in user by ID
      description: Search for a car from a logged in user by ID
      operationId: getCarByUserLogged
      parameters:
        - name: id
          in: path
          description: 'id of car '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarResponse'
        '404':
          description: Car not found
    delete:
      tags:
        - cars
      summary: Delete car by ID
      operationId: deleteCarByUserLogged
      parameters:
        - name: id
          in: path
          description: Id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Car deleted
        '404':
          description: Car not found
    put:
      tags:
        - cars
      summary: Update car by ID
      operationId: updateCarByUserLogged
      parameters:
        - name: id
          in: path
          description: id that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarRequest'
      responses:
        '200':
          description: successful operation
        '404':
          description: Car not found

components:
  schemas:
    UserRequest:
      type: object
      required:
        - username
        - name
      properties:
        firstName:
          type: string
          example: Joao
        lastName:
          type: string
          example: Jhon
        email:
          type: string
          example: john@email.com
        birthday:
          type: string
          example: 10/10/2020
          format: date
        login:
          type: string
          example: 'joao'
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '99999999999'
        cars:
          items:
            $ref: '#/components/schemas/CarRequest'
          type: array
          example: '12345'

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserRequest'
        - type: object
      properties:
        id:
          type: string
          example: f0822b54-0720-11ee-be56-0242ac120002
    UserLogged:
      allOf:
        - $ref: '#/components/schemas/UserRequest'
        - type: object
      properties:
        createdAt:
          type: string
          description: create date
          format: date-time
        lastLogin:
          type: string
          description: create date
          format: date-time

    CarRequest:
      type: object
      properties:
        year:
          type: number
          example: Ano de fabricação do carro
        licensePlate:
          type: string
          example: Placa do carro
        model:
          type: string
          example: Modelo do carro
        color:
          type: string
          example: john@email.com

    CarResponse:
      allOf:
        - $ref: '#/components/schemas/CarRequest'

    TokenRequest:
      type: object
      properties:
        login:
          type: string
          example: Login do usuario
        password:
          type: string
          example: Senha do usuario
    TokenResponse:
      type: object
      properties:
        value:
          type: string
          example: token de acesso (verificar)

